------------------------------------------------------------------------------
| Collection of exact solutions (ColESo)                                     |
|                                                                            |
| Revised  25.01.2021                                                        |
------------------------------------------------------------------------------

Условия распространения библиотеки см. в файле COPYING.
Информацию об авторах библиотеки см. в файле AUTHORS.
Описание изменений см. в файле NEWS.

I.    Введение
II.   Директории и файлы библиотеки
III.  Сборка библиотеки и запуск тестов
IV.   Использование библиотеки ColESo
          Использование в программах на C++
          Использование в программах на C
          Использование в программах на FORTRAN
V.    Формат файла параметров
VI.   Обработка ошибок библиотекой
VII.  Работа в многонитевом режиме
VIII. Использованные библиотеки
IX.   Контакты

Введение
--------

Коллекция точных решений (Collection of exact solutions, ColESo) 
состоит из более 30 точных решений. Её основным предназначением является
верификация численных методов моделирования сжимаемых течений. 
Основой библиотеки является набор решений линеаризованных уравнений 
Эйлера и Навье – Стокса. Также ColESo включает несколько нелинейных решений,
включая решение задачи Римана.

Директории и файлы библиотеки
-----------------------------

Корневая директория настоящей сборки содержит семь директорий.

docs       Содержит документы, относящиеся к библиотеке ColESo.

example    Содержит простые примеры программ на FORTRAN, C и C++
           с использованием библиотеки ColESo.

projects   Содержит проекты для Microsoft Visual Studio 2008.

qd         Содержит библиотеку QD (quad-double/double-double computation
           package). Эта библиотека не является частью ColESo и приводится
           для удобства пользователя.

src        Содержит исходный код библиотеки ColESo, включая элементы
           системы самотестирования и заголовочные файлы на C++.
           es_specfunc.cpp и es_specfunc_dd.cpp реализуют специальные функции.
           es_jacobi_rule.hpp содержат квадратурные формулы Гаусса – Якоби.
           es_aux.cpp реализует интерфейс для использования библиотеки ColESo
               в программах на C и FORTRAN.
           es_tests.cpp	реализует частичное тестирование библиотеки путём
               проверки, что "точные" решения действительно удовлетворяют
               уравнениям, которым они должны удовлетворять.
           io_parser.cpp содержит файловый и формульный парсеры, используемые
               при чтении настроечных файлов внутренними средствами ColESo.
           Остальные файлы *.cpp реализуют точные решения.

templates  Содержит шаблоны файлов, содержащих параметры точных решений.
           Формат файлов описан ниже.

test       Содержит программы с использованием ColESo, написанные
           на C++, C и FORTRAN, и выводящие данные для формирования изображений,
           аналогичных использованным в документации. Также приводятся
           bash-скрипты, формирующие изображения по этим данным при помощи
           gnuplot.


Сборка библиотеки и запуск тестов
---------------------------------

Библиотека ColESo может быть собрана с использованием Makefile.
Доступные цели сборки приведены ниже.
Все создаваемые библиотеки и запускаемые файлы помещаются в директорию bin.

qd-package    Сборка библиотеки QD

lib           Сборка ColESo с арифметикой типа double
libqd         Сборка ColESo с арифметиками типа double, double-double, quad-double

examplecpp    Сборка простого примера с использованием ColESo на C++
examplec      Сборка простого примера с использованием ColESo на C
examplef      Сборка простого примера с использованием ColESo на FORTRAN
examplecppqd  Сборка простого примера на C++ с использованием ColESo
              в арифметике повышенной точности

testcpp       Сборка программы на C++, выводящей данные для построения изображений
testcpprun    То же плюс запуск этой программы плюс рисование изображений в gnuplot
testc         Сборка программы на C, выводящей данные для построения изображений
testcrun      То же плюс запуск этой программы плюс рисование изображений в gnuplot
testf         Сборка программы на FORTRAN, выводящей данные для построения изображений
testfrun      То же плюс запуск этой программы плюс рисование изображений в gnuplot

check         Запуск проверок, что решения удовлетворяют уравнениям, которым
              они должны удовлетворять
checkqd       Для решения задачи о волне в цилиндрическом канале запустить
              проверку, что решение удовлетворяет линеаризованным уравнениям
              Навье – Стокса с двойной, четверной и восьмерной точностью

clean         Удалить все выходные директории (bin, test/DATA1D, test/DATA2D)

Также предлагается решение для Miscrosoft Visual Studio, содержащее два простых примера
на C++, работающих в арифметике двойной и четверной точности соответственно. 
Для сборки последнего требуется определить соответствующий флаг
(#define EXTRAPRECISION_COLESO) в файле src/personal.h и пересобрать библиотеку ColESo.

Использование библиотеки ColESo
-------------------------------

Чтобы вычислить решение при помощи библиотеки ColESo, необходимо 
последовательно выполнить следующие операции:
1) создать объект, реализующий конкретное точное решение;
2) задать параметры решения или вызвать процедуру считывания их из файла;
3) вызвать процедуру инициализации решения;
4) вызвать процедуру для вычисления решения на заданное время в заданной точке.
   Эта процедура может вызываться многократно, в т. ч. в многонитевом режиме.

Использование в программах на C++
---------------------------------

При программировании на С++ можно напрямую обращаться к объектам, реализующим 
конкретные точные решения. Каждое точное решение реализуется классом, 
наследующим абстрактный класс tPointFunction.

I. Создание объекта. 
Для создания объекта, реализующего точное решение, нужно создать экземпляр 
соответствующего класса, например:
s_CornerPlanar S;

II. Задание параметров решения. 
Параметры можно считать из файла, вызвав метод ReadParamsFromFile(const char*):
S.ReadParamsFromFile(file_name);
Здесь file_name – указатель на строку (const char*), содержащую имя файла.
Если имя файла не указать:
S.ReadParamsFromFile();
то параметры будут считываться из файла, соответствующего имени класса, 
в данном случае – es_cornerplanar.txt.

Параметры точного решения также можно задать напрямую, присвоив значения 
элементам класса. Например, единичную амплитуду можно задать оператором
S.Aterm = 1.0;
Имена членов класса могут иметь незначительные отличия от имён параметров, 
считываемых из файла. Это соответствие можно установить, открыв код метода 
ReadParams() у класса, реализующего конкретное точное решение.

III. Инициализация решения. 
Прежде, чем использовать точное решение, необходимо вызвать метод Init() 
для инициализации внутренних переменных класса. Например:
S.Init();

IV. Вычисление решения. 
Для вычисления решения вызывается метод PointValue, принимающий на вход время,
координаты и указатель на выходной массив. Минимальный размер выходного 
массива зависит от типа решения, но не более 10 элементов.

Использование в программах на C
-------------------------------

При программировании на C доступ к объектам, реализующим конкретные
точные решения, осуществляется через специальный интерфейс.

I. Создание объекта. 
Создание объекта, реализующего точное решение, выполняется функцией
void coleso_add_function(char* FUNCNAME, int* ID);
Функция принимает имя точного решения и возвращает его идентификатор 
по указателю ID. Например:
int ID; coleso_add_function("CornerPlanar", &ID);
Дальнейшее обращение к созданному объекту проводится с использованием 
этого идентификатора.

II. Задание параметров решения. 
Для считывания параметров из файла можно использовать функцию
void coleso_read_file(int ID, char* FILENAME);
Функция принимает идентификатор и имя файла. Например:
coleso_read_file(ID, "PARAMS/es_cornerplanar.txt");

Параметры точного решения также можно задать через строковый интерфейс.
Для этого используются функции
void coleso_set_parameter(char* PARAMNAME, char* PARAMVALUE);
void coleso_read_set(int ID);
Первая функция добавляет параметр в строковый буфер, вторая вызывает 
считывание из него аналогично чтению из файла. Аргумент PARAMNAME
является именем параметра, как он задаётся в файле, что не обязательно 
совпадает с именем члена класса. Например:
coleso_set_parameter("Aterm", "1.0");
coleso_set_parameter("Bterm", "3.0");
coleso_read_set(ID);

III. Инициализация решения. 
Прежде, чем использовать точное решение, необходимо вызвать функцию
void coleso_init(int ID);
Например:
coleso_init(ID);

IV. Вычисление решения. 
Для вычисления решения вызывается функция
void coleso_pointvalue(int ID, double T, double* C, double* V);
Она принимает на вход идентификатор объекта, время, координаты 
и указатель на выходной массив. Минимальный размер выходного массива 
зависит от типа решения, но не более 10 элементов.

Использование в программах на FORTRAN
-------------------------------------

Использование ColESo на FORTRAN идентично использованию на C.
В конец каждой строки, передаваемой в качестве параметра, 
необходимо добавлять нулевой символ, чтобы такая строка была 
корректно обработана в программе на C/C++.

Пример использования ColESo в программе на языке FORTRAN 
см. в файле example.f.

Формат файла параметров
-----------------------

Файлы параметров считываются построчно. Каждая строка содержит имя параметра 
и значение, разделённые одним или несколькими пробелами или знаками табуляции.
Значение может быть задано арифметическим выражением, в котором может 
использоваться предопределённая константа PI. 
Начиная с символа '#', все последующие символы в пределах строки игнорируются.
Byte Order Mark (BOM) в начале файла не допускается.
В шаблонах часть параметров закомментирована. Это сделано исключительно 
для удобства автора; такие параметры должны задаваться наряду с остальными, 
т. е. знак комментария перед такими параметрами должен быть снят.

Обработка ошибок
----------------

При возникновении ошибки библиотека ColESo не возвращает управление вызывающей 
программе, а вызывает макрос crash(...), определённый в personal.h. 
При необходимости пользователь может переопределить этот макрос.
При чтении файла параметров выдаётся лог. Для этого вызывается макрос 
pprintf(...), который также может быть переопределён. Этот же макрос 
вызывается в некоторых функциях инициализации. 
 
В многонитевом режиме
---------------------

Библиотека ColESo может использоваться в многонитевом режиме.

Интерфейс для использования ColESo в программах на C или FORTRAN основан 
на статических переменных. Во время вызова coleso_add_function иной доступ 
к библиотеке ColESo не допускается. Также не допускается одновременное задание 
параметров разных решений.

Используемые библиотеки
-----------------------

ColESo использует отдельные процедуры из следующих библиотек:

* library of Research Computing Center of Moscow State University,
  http://num-anal.srcc.msu.ru
* Cephes,
  http://www.netlib.org/cephes
* GNU LibQuadMath,
  https://gcc.gnu.org/onlinedocs/gcc-4.9.4/libquadmath
* Jacobi quadrature rules by S. Elhay, J. Kautsky, J. Burkadrt,
  people.sc.fsu.edu/~jburkardt/cpp_src/jacobi_rule/jacobi_rule.html

Условия распространения этих библиотек могут отличаться
от условий распространения остальной части библиотеки ColESo.

Для работы с арифметикой четверной и восьмерной точности ColESo использует
следующую библиотеку:

* QD – A C++/Fortran-90 double-double and quad-double package,
  https://github.com/aoki-t/QD


Контакты
--------

Если у Вас есть вопросы, касающиеся использования ColESo, 
Вы хотите сообщить об ошибке или готовы её улучшить, 
Вы можете написать письмо на <bahvalo@mail.ru>.
