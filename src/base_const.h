//======================================================================================================================
// Основные определения констант, инлайны (в том числе внутренние константы нуазета)
//======================================================================================================================
//#pragma once // Выключено - мешает компиляции от ПБ для EXTRAPRECISION через универсальный интерфейс
#include "base_config.h" // чтобы знать флаг EXTRAPRECISION

#ifndef BASE_CONSTANTS_HEADER
#define BASE_CONSTANTS_HEADER

//----------------------------------------------------------------------------------------------------------------------
// ПОЗИЦИИ КООРДИНАТ И ПЕРЕМЕННЫХ
//----------------------------------------------------------------------------------------------------------------------
// Координаты
#define Coor_X 0 //позиция X соординаты
#define Coor_Y 1 //позиция Y координаты
#define Coor_R 1 //для ZR-геометрии — позиция R координаты
#define Coor_Z 2 //позиция Z координаты

#define Solver1D (NumCoords==1)
#define Solver2D (NumCoords==2)  
#define Solver3D (NumCoords==3)

// Основные переменные
#define Var_R  0  //позиция плотности
#define Var_U  1  //позиция Х-скорости или X-импульса
#define Var_V  2  //позиция Y-скорости или Y-импульса
#define Var_W  3  //позиция Z-скорости или Z-импульса
#define Var_P  4  //позиция давления
#define Var_E  4  //позиция полной энергии
#define Var_N  5  //число базовых переменных без учета турбуля

//----------------------------------------------------------------------------------------------------------------------
// Constants
//----------------------------------------------------------------------------------------------------------------------

// Epsilons
#define tiny    1e-16  // #define DBL_EPSILON   2.2204460492503131e-016 /* smallest such that 1.0+DBL_EPSILON != 1.0 */
#define tinyflt 1e-8   // #define FLT_EPSILON   1.192092896e-07F        /* smallest such that 1.0+FLT_EPSILON != 1.0 */
#define huge    1e+16
#define hugeflt 1e+8

#ifndef EXTRAPRECISION
#define PiNumber 3.141592653589793238462643383279
#define Pi2      6.283185307179586476925286766558
#define Pi4      12.566370614359172953850573533116

#define C1_12    0.083333333333333333333333333333
#define C1_6     0.166666666666666666666666666666
#define C1_3     0.333333333333333333333333333333
#define C1_30    0.033333333333333333333333333333
#define C2_3     0.666666666666666666666666666666
#define C4_3     1.333333333333333333333333333333
#define C5_3     1.666666666666666666666666666666
#define C5_6     0.833333333333333333333333333333
#define C11_60   0.183333333333333333333333333333
#define C13_60   0.216666666666666666666666666666
#define C47_60   0.783333333333333333333333333333
#define CLN2     0.693147180559945309417232121458
#endif

//----------------------------------------------------------------------------------------------------------------------
// Inline functions for constants
//----------------------------------------------------------------------------------------------------------------------

// Минимальное число, представимое в заданной системе и отличное от нуля (с небольшим запасом)
template <typename fpv> inline fpv get_min_value() { return 1e-300; }
template <> inline float get_min_value<float>() { return 1e-37f; }

// Числа Pi, 2*Pi и ln(2)
template<typename fpv> inline fpv GetPiNumber();
template<typename fpv> inline fpv GetPiNumber2();
template<typename fpv> inline fpv GetLn2();
template<> inline NativeDouble GetPiNumber() { return 3.141592653589793238462643383279; }
template<> inline NativeDouble GetPiNumber2() { return 6.283185307179586476925286766558; } // 2*Pi
template<> inline NativeDouble GetLn2() { return 0.693147180559945309417232121458; } // ln(2)

template <typename fpv> inline fpv get_eps();
template<> inline NativeDouble get_eps() { return 2.2204460492503131e-016; } /* smallest such that 1.0+DBL_EPSILON != 1.0 */

#endif
