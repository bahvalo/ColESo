// *********************************************************************************************************************
// *****                                                                                                           *****
// *****                                           Special functions                                               *****
// *****    Calculation of Bessel functions BesselJ0, BesselJ1, BesselN0, BesselN1 with double-double precision    *****
// *****                                        Source: GCC libquadmath                                            *****
// *****                 Adapted for the use with double-double arithmetics given by QD library                    *****
// *****                                                                                                           *****
// *********************************************************************************************************************

// https://github.com/gcc-mirror/gcc/blob/master/libquadmath/math/j0q.c
// https://github.com/gcc-mirror/gcc/blob/master/libquadmath/math/j1q.c

//======================================================================================================================
// Copyright 2001 by Stephen L. Moshier (moshier@na-net.ornl.gov). 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
// You should have received a copy of the GNU Lesser General Public License along with this library; if not, see
// <http://www.gnu.org/licenses/>. 
//======================================================================================================================

/* dd_real BesselJ0(dd_real x)
 *
 * Returns Bessel function of first kind, order zero of the argument.
 *
 * The domain is divided into two major intervals [0, 2] and
 * (2, infinity). In the first interval the rational approximation
 * is J0(x) = 1 - x^2 / 4 + x^4 R(x^2)
 * The second interval is further partitioned into eight equal segments
 * of 1/x.
 *
 * J0(x) = sqrt(2/(pi x)) (P0(x) cos(X) - Q0(x) sin(X)),
 * X = x - pi/4,
 *
 * and the auxiliary functions are given by
 *
 * J0(x)cos(X) + Y0(x)sin(X) = sqrt( 2/(pi x)) P0(x),
 * P0(x) = 1 + 1/x^2 R(1/x^2)
 *
 * Y0(x)cos(X) - J0(x)sin(X) = sqrt( 2/(pi x)) Q0(x),
 * Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
 *
 *
 *
 * ACCURACY:
 *
 *                      Absolute error:
 * arithmetic   domain      # trials      peak         rms
 *    IEEE      0, 30       100000      1.7e-34      2.4e-35
 *
 *
 */

/* dd_real BesselN0(dd_real x)
 *
 * Returns Bessel function of the second kind, of order zero, of the argument.
 *
 * The approximation is the same as for J0(x), and
 * Y0(x) = sqrt(2/(pi x)) (P0(x) sin(X) + Q0(x) cos(X)).
 *
 * ACCURACY:
 *
 *  Absolute error, when y0(x) < 1; else relative error:
 *
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      0, 30       100000      3.0e-34     2.7e-35
 *
 */

#include "personal.h"
#include "es_specfunc.h"
#ifdef _NOISETTE
    #include "lib_base.h"
#endif
#ifdef double
    #undef double
#endif
#ifdef EXTRAPRECISION_COLESO
#include "qd/dd_real.h"

#define __float128 dd_real

/* 1 / sqrt(pi) */
static const __float128 ONEOSQPI = s2dd("5.6418958354775628694807945156077258584405E-1");
/* 2 / pi */
static const __float128 TWOOPI = s2dd("6.3661977236758134307553505349005744813784E-1");
static const __float128 zero = 0;

/* J0(x) = 1 - x^2/4 + x^2 x^2 R(x^2)
   Peak relative error 3.4e-37
   0 <= x <= 2  */
#define NJ0_2N 6
static const __float128 J0_2N[NJ0_2N + 1] = {
s2dd("  3.133239376997663645548490085151484674892E16"),
s2dd(" -5.479944965767990821079467311839107722107E14"),
s2dd("  6.290828903904724265980249871997551894090E12"),
s2dd(" -3.633750176832769659849028554429106299915E10"),
s2dd("  1.207743757532429576399485415069244807022E8"),
s2dd(" -2.107485999925074577174305650549367415465E5"),
s2dd("  1.562826808020631846245296572935547005859E2"),
};
#define NJ0_2D 6
static const __float128 J0_2D[NJ0_2D + 1] = {
s2dd("  2.005273201278504733151033654496928968261E18"),
s2dd("  2.063038558793221244373123294054149790864E16"),
s2dd("  1.053350447931127971406896594022010524994E14"),
s2dd("  3.496556557558702583143527876385508882310E11"),
s2dd("  8.249114511878616075860654484367133976306E8"),
s2dd("  1.402965782449571800199759247964242790589E6"),
s2dd("  1.619910762853439600957801751815074787351E3"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2),
   0 <= 1/x <= .0625
   Peak relative error 3.3e-36  */
#define NP16_IN 9
static const __float128 P16_IN[NP16_IN + 1] = {
s2dd("  -1.901689868258117463979611259731176301065E-16"),
s2dd("  -1.798743043824071514483008340803573980931E-13"),
s2dd("  -6.481746687115262291873324132944647438959E-11"),
s2dd("  -1.150651553745409037257197798528294248012E-8"),
s2dd("  -1.088408467297401082271185599507222695995E-6"),
s2dd("  -5.551996725183495852661022587879817546508E-5"),
s2dd("  -1.477286941214245433866838787454880214736E-3"),
s2dd("  -1.882877976157714592017345347609200402472E-2"),
s2dd("  -9.620983176855405325086530374317855880515E-2"),
s2dd("  -1.271468546258855781530458854476627766233E-1"),
};
#define NP16_ID 9
static const __float128 P16_ID[NP16_ID + 1] = {
s2dd("  2.704625590411544837659891569420764475007E-15"),
s2dd("  2.562526347676857624104306349421985403573E-12"),
s2dd("  9.259137589952741054108665570122085036246E-10"),
s2dd("  1.651044705794378365237454962653430805272E-7"),
s2dd("  1.573561544138733044977714063100859136660E-5"),
s2dd("  8.134482112334882274688298469629884804056E-4"),
s2dd("  2.219259239404080863919375103673593571689E-2"),
s2dd("  2.976990606226596289580242451096393862792E-1"),
s2dd("  1.713895630454693931742734911930937246254E0"),
s2dd("  3.231552290717904041465898249160757368855E0"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
    0.0625 <= 1/x <= 0.125
    Peak relative error 2.4e-35  */
#define NP8_16N 10
static const __float128 P8_16N[NP8_16N + 1] = {
s2dd("  -2.335166846111159458466553806683579003632E-15"),
s2dd("  -1.382763674252402720401020004169367089975E-12"),
s2dd("  -3.192160804534716696058987967592784857907E-10"),
s2dd("  -3.744199606283752333686144670572632116899E-8"),
s2dd("  -2.439161236879511162078619292571922772224E-6"),
s2dd("  -9.068436986859420951664151060267045346549E-5"),
s2dd("  -1.905407090637058116299757292660002697359E-3"),
s2dd("  -2.164456143936718388053842376884252978872E-2"),
s2dd("  -1.212178415116411222341491717748696499966E-1"),
s2dd("  -2.782433626588541494473277445959593334494E-1"),
s2dd("  -1.670703190068873186016102289227646035035E-1"),
};
#define NP8_16D 10
static const __float128 P8_16D[NP8_16D + 1] = {
s2dd("  3.321126181135871232648331450082662856743E-14"),
s2dd("  1.971894594837650840586859228510007703641E-11"),
s2dd("  4.571144364787008285981633719513897281690E-9"),
s2dd("  5.396419143536287457142904742849052402103E-7"),
s2dd("  3.551548222385845912370226756036899901549E-5"),
s2dd("  1.342353874566932014705609788054598013516E-3"),
s2dd("  2.899133293006771317589357444614157734385E-2"),
s2dd("  3.455374978185770197704507681491574261545E-1"),
s2dd("  2.116616964297512311314454834712634820514E0"),
s2dd("  5.850768316827915470087758636881584174432E0"),
s2dd("  5.655273858938766830855753983631132928968E0"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
  0.125 <= 1/x <= 0.1875
  Peak relative error 2.7e-35  */
#define NP5_8N 10
static const __float128 P5_8N[NP5_8N + 1] = {
s2dd("  -1.270478335089770355749591358934012019596E-12"),
s2dd("  -4.007588712145412921057254992155810347245E-10"),
s2dd("  -4.815187822989597568124520080486652009281E-8"),
s2dd("  -2.867070063972764880024598300408284868021E-6"),
s2dd("  -9.218742195161302204046454768106063638006E-5"),
s2dd("  -1.635746821447052827526320629828043529997E-3"),
s2dd("  -1.570376886640308408247709616497261011707E-2"),
s2dd("  -7.656484795303305596941813361786219477807E-2"),
s2dd("  -1.659371030767513274944805479908858628053E-1"),
s2dd("  -1.185340550030955660015841796219919804915E-1"),
s2dd("  -8.920026499909994671248893388013790366712E-3"),
};
#define NP5_8D 9
static const __float128 P5_8D[NP5_8D + 1] = {
s2dd("  1.806902521016705225778045904631543990314E-11"),
s2dd("  5.728502760243502431663549179135868966031E-9"),
s2dd("  6.938168504826004255287618819550667978450E-7"),
s2dd("  4.183769964807453250763325026573037785902E-5"),
s2dd("  1.372660678476925468014882230851637878587E-3"),
s2dd("  2.516452105242920335873286419212708961771E-2"),
s2dd("  2.550502712902647803796267951846557316182E-1"),
s2dd("  1.365861559418983216913629123778747617072E0"),
s2dd("  3.523825618308783966723472468855042541407E0"),
s2dd("  3.656365803506136165615111349150536282434E0"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
   Peak relative error 3.5e-35
   0.1875 <= 1/x <= 0.25  */
#define NP4_5N 9
static const __float128 P4_5N[NP4_5N + 1] = {
s2dd("  -9.791405771694098960254468859195175708252E-10"),
s2dd("  -1.917193059944531970421626610188102836352E-7"),
s2dd("  -1.393597539508855262243816152893982002084E-5"),
s2dd("  -4.881863490846771259880606911667479860077E-4"),
s2dd("  -8.946571245022470127331892085881699269853E-3"),
s2dd("  -8.707474232568097513415336886103899434251E-2"),
s2dd("  -4.362042697474650737898551272505525973766E-1"),
s2dd("  -1.032712171267523975431451359962375617386E0"),
s2dd("  -9.630502683169895107062182070514713702346E-1"),
s2dd("  -2.251804386252969656586810309252357233320E-1"),
};
#define NP4_5D 9
static const __float128 P4_5D[NP4_5D + 1] = {
s2dd("  1.392555487577717669739688337895791213139E-8"),
s2dd("  2.748886559120659027172816051276451376854E-6"),
s2dd("  2.024717710644378047477189849678576659290E-4"),
s2dd("  7.244868609350416002930624752604670292469E-3"),
s2dd("  1.373631762292244371102989739300382152416E-1"),
s2dd("  1.412298581400224267910294815260613240668E0"),
s2dd("  7.742495637843445079276397723849017617210E0"),
s2dd("  2.138429269198406512028307045259503811861E1"),
s2dd("  2.651547684548423476506826951831712762610E1"),
s2dd("  1.167499382465291931571685222882909166935E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
   Peak relative error 2.3e-36
   0.25 <= 1/x <= 0.3125  */
#define NP3r2_4N 9
static const __float128 P3r2_4N[NP3r2_4N + 1] = {
 s2dd("-2.589155123706348361249809342508270121788E-8"),
 s2dd("-3.746254369796115441118148490849195516593E-6"),
 s2dd("-1.985595497390808544622893738135529701062E-4"),
 s2dd("-5.008253705202932091290132760394976551426E-3"),
 s2dd("-6.529469780539591572179155511840853077232E-2"),
 s2dd("-4.468736064761814602927408833818990271514E-1"),
 s2dd("-1.556391252586395038089729428444444823380E0"),
 s2dd("-2.533135309840530224072920725976994981638E0"),
 s2dd("-1.605509621731068453869408718565392869560E0"),
 s2dd("-2.518966692256192789269859830255724429375E-1"),
};
#define NP3r2_4D 9
static const __float128 P3r2_4D[NP3r2_4D + 1] = {
 s2dd("3.682353957237979993646169732962573930237E-7"),
 s2dd("5.386741661883067824698973455566332102029E-5"),
 s2dd("2.906881154171822780345134853794241037053E-3"),
 s2dd("7.545832595801289519475806339863492074126E-2"),
 s2dd("1.029405357245594877344360389469584526654E0"),
 s2dd("7.565706120589873131187989560509757626725E0"),
 s2dd("2.951172890699569545357692207898667665796E1"),
 s2dd("5.785723537170311456298467310529815457536E1"),
 s2dd("5.095621464598267889126015412522773474467E1"),
 s2dd("1.602958484169953109437547474953308401442E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
   Peak relative error 1.0e-35
   0.3125 <= 1/x <= 0.375  */
#define NP2r7_3r2N 9
static const __float128 P2r7_3r2N[NP2r7_3r2N + 1] = {
 s2dd("-1.917322340814391131073820537027234322550E-7"),
 s2dd("-1.966595744473227183846019639723259011906E-5"),
 s2dd("-7.177081163619679403212623526632690465290E-4"),
 s2dd("-1.206467373860974695661544653741899755695E-2"),
 s2dd("-1.008656452188539812154551482286328107316E-1"),
 s2dd("-4.216016116408810856620947307438823892707E-1"),
 s2dd("-8.378631013025721741744285026537009814161E-1"),
 s2dd("-6.973895635309960850033762745957946272579E-1"),
 s2dd("-1.797864718878320770670740413285763554812E-1"),
 s2dd("-4.098025357743657347681137871388402849581E-3"),
};
#define NP2r7_3r2D 8
static const __float128 P2r7_3r2D[NP2r7_3r2D + 1] = {
 s2dd("2.726858489303036441686496086962545034018E-6"),
 s2dd("2.840430827557109238386808968234848081424E-4"),
 s2dd("1.063826772041781947891481054529454088832E-2"),
 s2dd("1.864775537138364773178044431045514405468E-1"),
 s2dd("1.665660052857205170440952607701728254211E0"),
 s2dd("7.723745889544331153080842168958348568395E0"),
 s2dd("1.810726427571829798856428548102077799835E1"),
 s2dd("1.986460672157794440666187503833545388527E1"),
 s2dd("8.645503204552282306364296517220055815488E0"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
   Peak relative error 1.3e-36
   0.3125 <= 1/x <= 0.4375  */
#define NP2r3_2r7N 9
static const __float128 P2r3_2r7N[NP2r3_2r7N + 1] = {
 s2dd("-1.594642785584856746358609622003310312622E-6"),
 s2dd("-1.323238196302221554194031733595194539794E-4"),
 s2dd("-3.856087818696874802689922536987100372345E-3"),
 s2dd("-5.113241710697777193011470733601522047399E-2"),
 s2dd("-3.334229537209911914449990372942022350558E-1"),
 s2dd("-1.075703518198127096179198549659283422832E0"),
 s2dd("-1.634174803414062725476343124267110981807E0"),
 s2dd("-1.030133247434119595616826842367268304880E0"),
 s2dd("-1.989811539080358501229347481000707289391E-1"),
 s2dd("-3.246859189246653459359775001466924610236E-3"),
};
#define NP2r3_2r7D 8
static const __float128 P2r3_2r7D[NP2r3_2r7D + 1] = {
 s2dd("2.267936634217251403663034189684284173018E-5"),
 s2dd("1.918112982168673386858072491437971732237E-3"),
 s2dd("5.771704085468423159125856786653868219522E-2"),
 s2dd("8.056124451167969333717642810661498890507E-1"),
 s2dd("5.687897967531010276788680634413789328776E0"),
 s2dd("2.072596760717695491085444438270778394421E1"),
 s2dd("3.801722099819929988585197088613160496684E1"),
 s2dd("3.254620235902912339534998592085115836829E1"),
 s2dd("1.104847772130720331801884344645060675036E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)
   Peak relative error 1.2e-35
   0.4375 <= 1/x <= 0.5  */
#define NP2_2r3N 8
static const __float128 P2_2r3N[NP2_2r3N + 1] = {
 s2dd("-1.001042324337684297465071506097365389123E-4"),
 s2dd("-6.289034524673365824853547252689991418981E-3"),
 s2dd("-1.346527918018624234373664526930736205806E-1"),
 s2dd("-1.268808313614288355444506172560463315102E0"),
 s2dd("-5.654126123607146048354132115649177406163E0"),
 s2dd("-1.186649511267312652171775803270911971693E1"),
 s2dd("-1.094032424931998612551588246779200724257E1"),
 s2dd("-3.728792136814520055025256353193674625267E0"),
 s2dd("-3.000348318524471807839934764596331810608E-1"),
};
#define NP2_2r3D 8
static const __float128 P2_2r3D[NP2_2r3D + 1] = {
 s2dd("1.423705538269770974803901422532055612980E-3"),
 s2dd("9.171476630091439978533535167485230575894E-2"),
 s2dd("2.049776318166637248868444600215942828537E0"),
 s2dd("2.068970329743769804547326701946144899583E1"),
 s2dd("1.025103500560831035592731539565060347709E2"),
 s2dd("2.528088049697570728252145557167066708284E2"),
 s2dd("2.992160327587558573740271294804830114205E2"),
 s2dd("1.540193761146551025832707739468679973036E2"),
 s2dd("2.779516701986912132637672140709452502650E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 2.2e-35
   0 <= 1/x <= .0625  */
#define NQ16_IN 10
static const __float128 Q16_IN[NQ16_IN + 1] = {
 s2dd("2.343640834407975740545326632205999437469E-18"),
 s2dd("2.667978112927811452221176781536278257448E-15"),
 s2dd("1.178415018484555397390098879501969116536E-12"),
 s2dd("2.622049767502719728905924701288614016597E-10"),
 s2dd("3.196908059607618864801313380896308968673E-8"),
 s2dd("2.179466154171673958770030655199434798494E-6"),
 s2dd("8.139959091628545225221976413795645177291E-5"),
 s2dd("1.563900725721039825236927137885747138654E-3"),
 s2dd("1.355172364265825167113562519307194840307E-2"),
 s2dd("3.928058355906967977269780046844768588532E-2"),
 s2dd("1.107891967702173292405380993183694932208E-2"),
};
#define NQ16_ID 9
static const __float128 Q16_ID[NQ16_ID + 1] = {
 s2dd("3.199850952578356211091219295199301766718E-17"),
 s2dd("3.652601488020654842194486058637953363918E-14"),
 s2dd("1.620179741394865258354608590461839031281E-11"),
 s2dd("3.629359209474609630056463248923684371426E-9"),
 s2dd("4.473680923894354600193264347733477363305E-7"),
 s2dd("3.106368086644715743265603656011050476736E-5"),
 s2dd("1.198239259946770604954664925153424252622E-3"),
 s2dd("2.446041004004283102372887804475767568272E-2"),
 s2dd("2.403235525011860603014707768815113698768E-1"),
 s2dd("9.491006790682158612266270665136910927149E-1"),
 /* 1.000000000000000000000000000000000000000E0 */
 };

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 5.1e-36
   0.0625 <= 1/x <= 0.125  */
#define NQ8_16N 11
static const __float128 Q8_16N[NQ8_16N + 1] = {
 s2dd("1.001954266485599464105669390693597125904E-17"),
 s2dd("7.545499865295034556206475956620160007849E-15"),
 s2dd("2.267838684785673931024792538193202559922E-12"),
 s2dd("3.561909705814420373609574999542459912419E-10"),
 s2dd("3.216201422768092505214730633842924944671E-8"),
 s2dd("1.731194793857907454569364622452058554314E-6"),
 s2dd("5.576944613034537050396518509871004586039E-5"),
 s2dd("1.051787760316848982655967052985391418146E-3"),
 s2dd("1.102852974036687441600678598019883746959E-2"),
 s2dd("5.834647019292460494254225988766702933571E-2"),
 s2dd("1.290281921604364618912425380717127576529E-1"),
 s2dd("7.598886310387075708640370806458926458301E-2"),
};
#define NQ8_16D 11
static const __float128 Q8_16D[NQ8_16D + 1] = {
 s2dd("1.368001558508338469503329967729951830843E-16"),
 s2dd("1.034454121857542147020549303317348297289E-13"),
 s2dd("3.128109209247090744354764050629381674436E-11"),
 s2dd("4.957795214328501986562102573522064468671E-9"),
 s2dd("4.537872468606711261992676606899273588899E-7"),
 s2dd("2.493639207101727713192687060517509774182E-5"),
 s2dd("8.294957278145328349785532236663051405805E-4"),
 s2dd("1.646471258966713577374948205279380115839E-2"),
 s2dd("1.878910092770966718491814497982191447073E-1"),
 s2dd("1.152641605706170353727903052525652504075E0"),
 s2dd("3.383550240669773485412333679367792932235E0"),
 s2dd("3.823875252882035706910024716609908473970E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 3.9e-35
   0.125 <= 1/x <= 0.1875  */
#define NQ5_8N 10
static const __float128 Q5_8N[NQ5_8N + 1] = {
 s2dd("1.750399094021293722243426623211733898747E-13"),
 s2dd("6.483426211748008735242909236490115050294E-11"),
 s2dd("9.279430665656575457141747875716899958373E-9"),
 s2dd("6.696634968526907231258534757736576340266E-7"),
 s2dd("2.666560823798895649685231292142838188061E-5"),
 s2dd("6.025087697259436271271562769707550594540E-4"),
 s2dd("7.652807734168613251901945778921336353485E-3"),
 s2dd("5.226269002589406461622551452343519078905E-2"),
 s2dd("1.748390159751117658969324896330142895079E-1"),
 s2dd("2.378188719097006494782174902213083589660E-1"),
 s2dd("8.383984859679804095463699702165659216831E-2"),
};
#define NQ5_8D 10
static const __float128 Q5_8D[NQ5_8D + 1] = {
 s2dd("2.389878229704327939008104855942987615715E-12"),
 s2dd("8.926142817142546018703814194987786425099E-10"),
 s2dd("1.294065862406745901206588525833274399038E-7"),
 s2dd("9.524139899457666250828752185212769682191E-6"),
 s2dd("3.908332488377770886091936221573123353489E-4"),
 s2dd("9.250427033957236609624199884089916836748E-3"),
 s2dd("1.263420066165922645975830877751588421451E-1"),
 s2dd("9.692527053860420229711317379861733180654E-1"),
 s2dd("3.937813834630430172221329298841520707954E0"),
 s2dd("7.603126427436356534498908111445191312181E0"),
 s2dd("5.670677653334105479259958485084550934305E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 3.2e-35
   0.1875 <= 1/x <= 0.25  */
#define NQ4_5N 10
static const __float128 Q4_5N[NQ4_5N + 1] = {
 s2dd("2.233870042925895644234072357400122854086E-11"),
 s2dd("5.146223225761993222808463878999151699792E-9"),
 s2dd("4.459114531468296461688753521109797474523E-7"),
 s2dd("1.891397692931537975547242165291668056276E-5"),
 s2dd("4.279519145911541776938964806470674565504E-4"),
 s2dd("5.275239415656560634702073291768904783989E-3"),
 s2dd("3.468698403240744801278238473898432608887E-2"),
 s2dd("1.138773146337708415188856882915457888274E-1"),
 s2dd("1.622717518946443013587108598334636458955E-1"),
 s2dd("7.249040006390586123760992346453034628227E-2"),
 s2dd("1.941595365256460232175236758506411486667E-3"),
};
#define NQ4_5D 9
static const __float128 Q4_5D[NQ4_5D + 1] = {
 s2dd("3.049977232266999249626430127217988047453E-10"),
 s2dd("7.120883230531035857746096928889676144099E-8"),
 s2dd("6.301786064753734446784637919554359588859E-6"),
 s2dd("2.762010530095069598480766869426308077192E-4"),
 s2dd("6.572163250572867859316828886203406361251E-3"),
 s2dd("8.752566114841221958200215255461843397776E-2"),
 s2dd("6.487654992874805093499285311075289932664E-1"),
 s2dd("2.576550017826654579451615283022812801435E0"),
 s2dd("5.056392229924022835364779562707348096036E0"),
 s2dd("4.179770081068251464907531367859072157773E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 1.4e-36
   0.25 <= 1/x <= 0.3125  */
#define NQ3r2_4N 10
static const __float128 Q3r2_4N[NQ3r2_4N + 1] = {
 s2dd("6.126167301024815034423262653066023684411E-10"),
 s2dd("1.043969327113173261820028225053598975128E-7"),
 s2dd("6.592927270288697027757438170153763220190E-6"),
 s2dd("2.009103660938497963095652951912071336730E-4"),
 s2dd("3.220543385492643525985862356352195896964E-3"),
 s2dd("2.774405975730545157543417650436941650990E-2"),
 s2dd("1.258114008023826384487378016636555041129E-1"),
 s2dd("2.811724258266902502344701449984698323860E-1"),
 s2dd("2.691837665193548059322831687432415014067E-1"),
 s2dd("7.949087384900985370683770525312735605034E-2"),
 s2dd("1.229509543620976530030153018986910810747E-3"),
};
#define NQ3r2_4D 9
static const __float128 Q3r2_4D[NQ3r2_4D + 1] = {
 s2dd("8.364260446128475461539941389210166156568E-9"),
 s2dd("1.451301850638956578622154585560759862764E-6"),
 s2dd("9.431830010924603664244578867057141839463E-5"),
 s2dd("3.004105101667433434196388593004526182741E-3"),
 s2dd("5.148157397848271739710011717102773780221E-2"),
 s2dd("4.901089301726939576055285374953887874895E-1"),
 s2dd("2.581760991981709901216967665934142240346E0"),
 s2dd("7.257105880775059281391729708630912791847E0"),
 s2dd("1.006014717326362868007913423810737369312E1"),
 s2dd("5.879416600465399514404064187445293212470E0"),
 /* 1.000000000000000000000000000000000000000E0*/
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 3.8e-36
   0.3125 <= 1/x <= 0.375  */
#define NQ2r7_3r2N 9
static const __float128 Q2r7_3r2N[NQ2r7_3r2N + 1] = {
 s2dd("7.584861620402450302063691901886141875454E-8"),
 s2dd("9.300939338814216296064659459966041794591E-6"),
 s2dd("4.112108906197521696032158235392604947895E-4"),
 s2dd("8.515168851578898791897038357239630654431E-3"),
 s2dd("8.971286321017307400142720556749573229058E-2"),
 s2dd("4.885856732902956303343015636331874194498E-1"),
 s2dd("1.334506268733103291656253500506406045846E0"),
 s2dd("1.681207956863028164179042145803851824654E0"),
 s2dd("8.165042692571721959157677701625853772271E-1"),
 s2dd("9.805848115375053300608712721986235900715E-2"),
};
#define NQ2r7_3r2D 9
static const __float128 Q2r7_3r2D[NQ2r7_3r2D + 1] = {
 s2dd("1.035586492113036586458163971239438078160E-6"),
 s2dd("1.301999337731768381683593636500979713689E-4"),
 s2dd("5.993695702564527062553071126719088859654E-3"),
 s2dd("1.321184892887881883489141186815457808785E-1"),
 s2dd("1.528766555485015021144963194165165083312E0"),
 s2dd("9.561463309176490874525827051566494939295E0"),
 s2dd("3.203719484883967351729513662089163356911E1"),
 s2dd("5.497294687660930446641539152123568668447E1"),
 s2dd("4.391158169390578768508675452986948391118E1"),
 s2dd("1.347836630730048077907818943625789418378E1"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 2.2e-35
   0.375 <= 1/x <= 0.4375  */
#define NQ2r3_2r7N 9
static const __float128 Q2r3_2r7N[NQ2r3_2r7N + 1] = {
 s2dd("4.455027774980750211349941766420190722088E-7"),
 s2dd("4.031998274578520170631601850866780366466E-5"),
 s2dd("1.273987274325947007856695677491340636339E-3"),
 s2dd("1.818754543377448509897226554179659122873E-2"),
 s2dd("1.266748858326568264126353051352269875352E-1"),
 s2dd("4.327578594728723821137731555139472880414E-1"),
 s2dd("6.892532471436503074928194969154192615359E-1"),
 s2dd("4.490775818438716873422163588640262036506E-1"),
 s2dd("8.649615949297322440032000346117031581572E-2"),
 s2dd("7.261345286655345047417257611469066147561E-4"),
};
#define NQ2r3_2r7D 8
static const __float128 Q2r3_2r7D[NQ2r3_2r7D + 1] = {
 s2dd("6.082600739680555266312417978064954793142E-6"),
 s2dd("5.693622538165494742945717226571441747567E-4"),
 s2dd("1.901625907009092204458328768129666975975E-2"),
 s2dd("2.958689532697857335456896889409923371570E-1"),
 s2dd("2.343124711045660081603809437993368799568E0"),
 s2dd("9.665894032187458293568704885528192804376E0"),
 s2dd("2.035273104990617136065743426322454881353E1"),
 s2dd("2.044102010478792896815088858740075165531E1"),
 s2dd("8.445937177863155827844146643468706599304E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),
   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))
   Peak relative error 3.1e-36
   0.4375 <= 1/x <= 0.5  */
#define NQ2_2r3N 9
static const __float128 Q2_2r3N[NQ2_2r3N + 1] = {
 s2dd("2.817566786579768804844367382809101929314E-6"),
 s2dd("2.122772176396691634147024348373539744935E-4"),
 s2dd("5.501378031780457828919593905395747517585E-3"),
 s2dd("6.355374424341762686099147452020466524659E-2"),
 s2dd("3.539652320122661637429658698954748337223E-1"),
 s2dd("9.571721066119617436343740541777014319695E-1"),
 s2dd("1.196258777828426399432550698612171955305E0"),
 s2dd("6.069388659458926158392384709893753793967E-1"),
 s2dd("9.026746127269713176512359976978248763621E-2"),
 s2dd("5.317668723070450235320878117210807236375E-4"),
};
#define NQ2_2r3D 8
static const __float128 Q2_2r3D[NQ2_2r3D + 1] = {
 s2dd("3.846924354014260866793741072933159380158E-5"),
 s2dd("3.017562820057704325510067178327449946763E-3"),
 s2dd("8.356305620686867949798885808540444210935E-2"),
 s2dd("1.068314930499906838814019619594424586273E0"),
 s2dd("6.900279623894821067017966573640732685233E0"),
 s2dd("2.307667390886377924509090271780839563141E1"),
 s2dd("3.921043465412723970791036825401273528513E1"),
 s2dd("3.167569478939719383241775717095729233436E1"),
 s2dd("1.051023841699200920276198346301543665909E1"),
 /* 1.000000000000000000000000000000000000000E0*/
};


/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */

static __float128
neval (__float128 x, const __float128 *p, int n)
{
  __float128 y;

  p += n;
  y = *p--;
  do
    {
      y = y * x + *p--;
    }
  while (--n > 0);
  return y;
}


/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */

static __float128
deval (__float128 x, const __float128 *p, int n)
{
  __float128 y;

  p += n;
  y = x + *p--;
  do
    {
      y = y * x + *p--;
    }
  while (--n > 0);
  return y;
}


/* Bessel function of the first kind, order zero.  */

template<> dd_real BesselJ0(dd_real x) {
  __float128 xx, xinv, z, p, q, c, s, cc, ss;

 // if (! finiteq (x))
 //   {
 //     if (x != x)
    //return x + x;
 //     else
    //return 0;
 //   }
  if (x == 0)
    return 1;

  xx = fabs(x);
  if (xx <= 2)
    {
        if (xx < 1e-57) //0x1p-57Q)
    return 1;
      /* 0 <= x <= 2 */
      z = xx * xx;
      p = z * z * neval (z, J0_2N, NJ0_2N) / deval (z, J0_2D, NJ0_2D);
      p -= 0.25 * z;
      p += 1;
      return p;
    }

  /* X = x - pi/4
     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)
     = 1/sqrt(2) * (cos(x) + sin(x))
     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)
     = 1/sqrt(2) * (sin(x) - cos(x))
     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
     cf. Fdlibm.  */
  sincos(xx, s, c);
  ss = s - c;
  cc = s + c;
  if (xx <= 1e200 /*FLT128_MAX*/ / 2)
    {
      z = -cos(xx + xx);
      if ((s * c) < 0)
    cc = z / ss;
      else
    ss = z / cc;
    }

  if (xx > 1e256) //0x1p256Q)
    return ONEOSQPI * cc / sqrt(xx);

  xinv = 1 / xx;
  z = xinv * xinv;
  if (xinv <= 0.25)
    {
      if (xinv <= 0.125)
    {
      if (xinv <= 0.0625)
        {
          p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);
          q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);
        }
      else
        {
          p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);
          q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);
        }
    }
      else if (xinv <= 0.1875)
    {
      p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);
      q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);
    }
      else
    {
      p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);
      q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);
    }
    }                /* .25 */
  else /* if (xinv <= 0.5) */
    {
      if (xinv <= 0.375)
    {
      if (xinv <= 0.3125)
        {
          p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);
          q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);
        }
      else
        {
          p = neval (z, P2r7_3r2N, NP2r7_3r2N)
          / deval (z, P2r7_3r2D, NP2r7_3r2D);
          q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)
          / deval (z, Q2r7_3r2D, NQ2r7_3r2D);
        }
    }
      else if (xinv <= 0.4375)
    {
      p = neval (z, P2r3_2r7N, NP2r3_2r7N)
          / deval (z, P2r3_2r7D, NP2r3_2r7D);
      q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)
          / deval (z, Q2r3_2r7D, NQ2r3_2r7D);
    }
      else
    {
      p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);
      q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);
    }
    }
  p = 1 + z * p;
  q = z * xinv * q;
  q = q - 0.125 * xinv;
  z = ONEOSQPI * (p * cc - q * ss) / sqrt(xx);
  return z;
}



/* Y0(x) = 2/pi * log(x) * J0(x) + R(x^2)
   Peak absolute error 1.7e-36 (relative where Y0 > 1)
   0 <= x <= 2   */
#define NY0_2N 7
static const __float128 Y0_2N[NY0_2N + 1] = {
s2dd("-1.062023609591350692692296993537002558155E19"),
s2dd("  2.542000883190248639104127452714966858866E19"),
s2dd(" -1.984190771278515324281415820316054696545E18"),
s2dd("  4.982586044371592942465373274440222033891E16"),
s2dd(" -5.529326354780295177243773419090123407550E14"),
s2dd("  3.013431465522152289279088265336861140391E12"),
s2dd(" -7.959436160727126750732203098982718347785E9"),
s2dd("  8.230845651379566339707130644134372793322E6"),
};
#define NY0_2D 7
static const __float128 Y0_2D[NY0_2D + 1] = {
s2dd("  1.438972634353286978700329883122253752192E20"),
s2dd("  1.856409101981569254247700169486907405500E18"),
s2dd("  1.219693352678218589553725579802986255614E16"),
s2dd("  5.389428943282838648918475915779958097958E13"),
s2dd("  1.774125762108874864433872173544743051653E11"),
s2dd("  4.522104832545149534808218252434693007036E8"),
s2dd("  8.872187401232943927082914504125234454930E5"),
s2dd("  1.251945613186787532055610876304669413955E3"),
 /* 1.000000000000000000000000000000000000000E0 */
};

static const __float128 U0 = s2dd("-7.3804295108687225274343927948483016310862e-02");

/* Bessel function of the second kind, order zero.  */

template<> dd_real BesselN0(dd_real x) {
  __float128 xx, xinv, z, p, q, c, s, cc, ss;

  //if (! finiteq (x))
  //  return 1 / (x + x * x);
  if (x <= 0)
    {
      if (x < 0)
    return (zero / (zero * x));
      return -1 / zero; /* -inf and divide by zero exception.  */
    }
  xx = fabs(x);
  if (xx <= 1e-57)
    return U0 + TWOOPI * log(x);
  if (xx <= 2)
    {
      /* 0 <= x <= 2 */
      z = xx * xx;
      p = neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);
      p = TWOOPI * log(x) * BesselJ0 (x) + p;
      return p;
    }

  /* X = x - pi/4
     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)
     = 1/sqrt(2) * (cos(x) + sin(x))
     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)
     = 1/sqrt(2) * (sin(x) - cos(x))
     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
     cf. Fdlibm.  */
  sincos(x, s, c);
  ss = s - c;
  cc = s + c;
  if (xx <= 1e256 /*FLT128_MAX*/ / 2)
    {
      z = -cos(x + x);
      if ((s * c) < 0)
    cc = z / ss;
      else
    ss = z / cc;
    }

  if (xx > 1e256 /*0x1p256Q*/)
    return ONEOSQPI * ss / sqrt(x);

  xinv = 1 / xx;
  z = xinv * xinv;
  if (xinv <= 0.25)
    {
      if (xinv <= 0.125)
    {
      if (xinv <= 0.0625)
        {
          p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);
          q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);
        }
      else
        {
          p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);
          q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);
        }
    }
      else if (xinv <= 0.1875)
    {
      p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);
      q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);
    }
      else
    {
      p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);
      q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);
    }
    }                /* .25 */
  else /* if (xinv <= 0.5) */
    {
      if (xinv <= 0.375)
    {
      if (xinv <= 0.3125)
        {
          p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);
          q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);
        }
      else
        {
          p = neval (z, P2r7_3r2N, NP2r7_3r2N)
          / deval (z, P2r7_3r2D, NP2r7_3r2D);
          q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)
          / deval (z, Q2r7_3r2D, NQ2r7_3r2D);
        }
    }
      else if (xinv <= 0.4375)
    {
      p = neval (z, P2r3_2r7N, NP2r3_2r7N)
          / deval (z, P2r3_2r7D, NP2r3_2r7D);
      q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)
          / deval (z, Q2r3_2r7D, NQ2r3_2r7D);
    }
      else
    {
      p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);
      q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);
    }
    }
  p = 1 + z * p;
  q = z * xinv * q;
  q = q - 0.125 * xinv;
  z = ONEOSQPI * (p * ss + q * cc) / sqrt(x);
  return z;
}


#undef NJ0_2N
#undef NJ0_2D
#undef NP16_IN
#undef NP16_ID
#undef NP8_16N
#undef NP8_16D
#undef NP5_8N
#undef NP5_8D
#undef NP4_5N
#undef NP4_5D
#undef NP3r2_4N
#undef NP3r2_4D
#undef NP2r7_3r2N
#undef NP2r7_3r2D
#undef NP2r3_2r7N
#undef NP2r3_2r7D
#undef NP2_2r3N
#undef NP2_2r3D
#undef NQ16_IN
#undef NQ16_ID
#undef NQ8_16N
#undef NQ8_16D
#undef NQ5_8N
#undef NQ5_8D
#undef NQ4_5N
#undef NQ4_5D
#undef NQ3r2_4N
#undef NQ3r2_4D
#undef NQ2r7_3r2N
#undef NQ2r7_3r2D
#undef NQ2r3_2r7N
#undef NQ2r3_2r7D
#undef NQ2_2r3N
#undef NQ2_2r3D

/*                            j1l.c
 *
 *    Bessel function of order one
 *
 *
 *
 * SYNOPSIS:
 *
 * long double x, y, j1l();
 *
 * y = j1l( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns Bessel function of first kind, order one of the argument.
 *
 * The domain is divided into two major intervals [0, 2] and
 * (2, infinity). In the first interval the rational approximation is
 * J1(x) = .5x + x x^2 R(x^2)
 *
 * The second interval is further partitioned into eight equal segments
 * of 1/x.
 * J1(x) = sqrt(2/(pi x)) (P1(x) cos(X) - Q1(x) sin(X)),
 * X = x - 3 pi / 4,
 *
 * and the auxiliary functions are given by
 *
 * J1(x)cos(X) + Y1(x)sin(X) = sqrt( 2/(pi x)) P1(x),
 * P1(x) = 1 + 1/x^2 R(1/x^2)
 *
 * Y1(x)cos(X) - J1(x)sin(X) = sqrt( 2/(pi x)) Q1(x),
 * Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)).
 *
 *
 *
 * ACCURACY:
 *
 *                      Absolute error:
 * arithmetic   domain      # trials      peak         rms
 *    IEEE      0, 30       100000      2.8e-34      2.7e-35
 *
 *
 */

/*                            y1l.c
 *
 *    Bessel function of the second kind, order one
 *
 *
 *
 * SYNOPSIS:
 *
 * double x, y, y1l();
 *
 * y = y1l( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns Bessel function of the second kind, of order
 * one, of the argument.
 *
 * The domain is divided into two major intervals [0, 2] and
 * (2, infinity). In the first interval the rational approximation is
 * Y1(x) = 2/pi * (log(x) * J1(x) - 1/x) + x R(x^2) .
 * In the second interval the approximation is the same as for J1(x), and
 * Y1(x) = sqrt(2/(pi x)) (P1(x) sin(X) + Q1(x) cos(X)),
 * X = x - 3 pi / 4.
 *
 * ACCURACY:
 *
 *  Absolute error, when y0(x) < 1; else relative error:
 *
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      0, 30       100000      2.7e-34     2.9e-35
 *
 */

/* Copyright 2001 by Stephen L. Moshier (moshier@na-net.onrl.gov).

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, see
    <http://www.gnu.org/licenses/>.  */

//#include "quadmath-imp.h"


/* 1 / sqrt(pi) */
//static const __float128 ONEOSQPI = s2dd("5.6418958354775628694807945156077258584405E-1");
/* 2 / pi */
//static const __float128 TWOOPI = s2dd("6.3661977236758134307553505349005744813784E-1");
//static const __float128 zero = 0;

/* J1(x) = .5x + x x^2 R(x^2)
   Peak relative error 1.9e-35
   0 <= x <= 2  */
#define NJ0_2N 6
static const __float128 J0_2N_[NJ0_2N + 1] = {
 s2dd("-5.943799577386942855938508697619735179660E16"),
 s2dd(" 1.812087021305009192259946997014044074711E15"),
 s2dd("-2.761698314264509665075127515729146460895E13"),
 s2dd(" 2.091089497823600978949389109350658815972E11"),
 s2dd("-8.546413231387036372945453565654130054307E8"),
 s2dd(" 1.797229225249742247475464052741320612261E6"),
 s2dd("-1.559552840946694171346552770008812083969E3"),
};
#define NJ0_2D 6
static const __float128 J0_2D_[NJ0_2D + 1] = {
 s2dd(" 9.510079323819108569501613916191477479397E17"),
 s2dd(" 1.063193817503280529676423936545854693915E16"),
 s2dd(" 5.934143516050192600795972192791775226920E13"),
 s2dd(" 2.168000911950620999091479265214368352883E11"),
 s2dd(" 5.673775894803172808323058205986256928794E8"),
 s2dd(" 1.080329960080981204840966206372671147224E6"),
 s2dd(" 1.411951256636576283942477881535283304912E3"),
 /* 1.000000000000000000000000000000000000000E0L */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   0 <= 1/x <= .0625
   Peak relative error 3.6e-36  */
#define NP16_IN 9
static const __float128 P16_IN_[NP16_IN + 1] = {
 s2dd(" 5.143674369359646114999545149085139822905E-16"),
 s2dd(" 4.836645664124562546056389268546233577376E-13"),
 s2dd(" 1.730945562285804805325011561498453013673E-10"),
 s2dd(" 3.047976856147077889834905908605310585810E-8"),
 s2dd(" 2.855227609107969710407464739188141162386E-6"),
 s2dd(" 1.439362407936705484122143713643023998457E-4"),
 s2dd(" 3.774489768532936551500999699815873422073E-3"),
 s2dd(" 4.723962172984642566142399678920790598426E-2"),
 s2dd(" 2.359289678988743939925017240478818248735E-1"),
 s2dd(" 3.032580002220628812728954785118117124520E-1"),
};
#define NP16_ID 9
static const __float128 P16_ID_[NP16_ID + 1] = {
 s2dd(" 4.389268795186898018132945193912677177553E-15"),
 s2dd(" 4.132671824807454334388868363256830961655E-12"),
 s2dd(" 1.482133328179508835835963635130894413136E-9"),
 s2dd(" 2.618941412861122118906353737117067376236E-7"),
 s2dd(" 2.467854246740858470815714426201888034270E-5"),
 s2dd(" 1.257192927368839847825938545925340230490E-3"),
 s2dd(" 3.362739031941574274949719324644120720341E-2"),
 s2dd(" 4.384458231338934105875343439265370178858E-1"),
 s2dd(" 2.412830809841095249170909628197264854651E0"),
 s2dd(" 4.176078204111348059102962617368214856874E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
    0.0625 <= 1/x <= 0.125
    Peak relative error 1.9e-36  */
#define NP8_16N 11
static const __float128 P8_16N_[NP8_16N + 1] = {
 s2dd(" 2.984612480763362345647303274082071598135E-16"),
 s2dd(" 1.923651877544126103941232173085475682334E-13"),
 s2dd(" 4.881258879388869396043760693256024307743E-11"),
 s2dd(" 6.368866572475045408480898921866869811889E-9"),
 s2dd(" 4.684818344104910450523906967821090796737E-7"),
 s2dd(" 2.005177298271593587095982211091300382796E-5"),
 s2dd(" 4.979808067163957634120681477207147536182E-4"),
 s2dd(" 6.946005761642579085284689047091173581127E-3"),
 s2dd(" 5.074601112955765012750207555985299026204E-2"),
 s2dd(" 1.698599455896180893191766195194231825379E-1"),
 s2dd(" 1.957536905259237627737222775573623779638E-1"),
 s2dd(" 2.991314703282528370270179989044994319374E-2"),
};
#define NP8_16D 10
static const __float128 P8_16D_[NP8_16D + 1] = {
 s2dd(" 2.546869316918069202079580939942463010937E-15"),
 s2dd(" 1.644650111942455804019788382157745229955E-12"),
 s2dd(" 4.185430770291694079925607420808011147173E-10"),
 s2dd(" 5.485331966975218025368698195861074143153E-8"),
 s2dd(" 4.062884421686912042335466327098932678905E-6"),
 s2dd(" 1.758139661060905948870523641319556816772E-4"),
 s2dd(" 4.445143889306356207566032244985607493096E-3"),
 s2dd(" 6.391901016293512632765621532571159071158E-2"),
 s2dd(" 4.933040207519900471177016015718145795434E-1"),
 s2dd(" 1.839144086168947712971630337250761842976E0"),
 s2dd(" 2.715120873995490920415616716916149586579E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
  0.125 <= 1/x <= 0.1875
  Peak relative error 1.3e-36  */
#define NP5_8N 10
static const __float128 P5_8N_[NP5_8N + 1] = {
 s2dd(" 2.837678373978003452653763806968237227234E-12"),
 s2dd(" 9.726641165590364928442128579282742354806E-10"),
 s2dd(" 1.284408003604131382028112171490633956539E-7"),
 s2dd(" 8.524624695868291291250573339272194285008E-6"),
 s2dd(" 3.111516908953172249853673787748841282846E-4"),
 s2dd(" 6.423175156126364104172801983096596409176E-3"),
 s2dd(" 7.430220589989104581004416356260692450652E-2"),
 s2dd(" 4.608315409833682489016656279567605536619E-1"),
 s2dd(" 1.396870223510964882676225042258855977512E0"),
 s2dd(" 1.718500293904122365894630460672081526236E0"),
 s2dd(" 5.465927698800862172307352821870223855365E-1"),
};
#define NP5_8D 10
static const __float128 P5_8D_[NP5_8D + 1] = {
 s2dd(" 2.421485545794616609951168511612060482715E-11"),
 s2dd(" 8.329862750896452929030058039752327232310E-9"),
 s2dd(" 1.106137992233383429630592081375289010720E-6"),
 s2dd(" 7.405786153760681090127497796448503306939E-5"),
 s2dd(" 2.740364785433195322492093333127633465227E-3"),
 s2dd(" 5.781246470403095224872243564165254652198E-2"),
 s2dd(" 6.927711353039742469918754111511109983546E-1"),
 s2dd(" 4.558679283460430281188304515922826156690E0"),
 s2dd(" 1.534468499844879487013168065728837900009E1"),
 s2dd(" 2.313927430889218597919624843161569422745E1"),
 s2dd(" 1.194506341319498844336768473218382828637E1"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   Peak relative error 1.4e-36
   0.1875 <= 1/x <= 0.25  */
#define NP4_5N 10
static const __float128 P4_5N_[NP4_5N + 1] = {
 s2dd(" 1.846029078268368685834261260420933914621E-10"),
 s2dd(" 3.916295939611376119377869680335444207768E-8"),
 s2dd(" 3.122158792018920627984597530935323997312E-6"),
 s2dd(" 1.218073444893078303994045653603392272450E-4"),
 s2dd(" 2.536420827983485448140477159977981844883E-3"),
 s2dd(" 2.883011322006690823959367922241169171315E-2"),
 s2dd(" 1.755255190734902907438042414495469810830E-1"),
 s2dd(" 5.379317079922628599870898285488723736599E-1"),
 s2dd(" 7.284904050194300773890303361501726561938E-1"),
 s2dd(" 3.270110346613085348094396323925000362813E-1"),
 s2dd(" 1.804473805689725610052078464951722064757E-2"),
};
#define NP4_5D 9
static const __float128 P4_5D_[NP4_5D + 1] = {
 s2dd(" 1.575278146806816970152174364308980863569E-9"),
 s2dd(" 3.361289173657099516191331123405675054321E-7"),
 s2dd(" 2.704692281550877810424745289838790693708E-5"),
 s2dd(" 1.070854930483999749316546199273521063543E-3"),
 s2dd(" 2.282373093495295842598097265627962125411E-2"),
 s2dd(" 2.692025460665354148328762368240343249830E-1"),
 s2dd(" 1.739892942593664447220951225734811133759E0"),
 s2dd(" 5.890727576752230385342377570386657229324E0"),
 s2dd(" 9.517442287057841500750256954117735128153E0"),
 s2dd(" 6.100616353935338240775363403030137736013E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   Peak relative error 3.0e-36
   0.25 <= 1/x <= 0.3125  */
#define NP3r2_4N 9
static const __float128 P3r2_4N_[NP3r2_4N + 1] = {
 s2dd(" 8.240803130988044478595580300846665863782E-8"),
 s2dd(" 1.179418958381961224222969866406483744580E-5"),
 s2dd(" 6.179787320956386624336959112503824397755E-4"),
 s2dd(" 1.540270833608687596420595830747166658383E-2"),
 s2dd(" 1.983904219491512618376375619598837355076E-1"),
 s2dd(" 1.341465722692038870390470651608301155565E0"),
 s2dd(" 4.617865326696612898792238245990854646057E0"),
 s2dd(" 7.435574801812346424460233180412308000587E0"),
 s2dd(" 4.671327027414635292514599201278557680420E0"),
 s2dd(" 7.299530852495776936690976966995187714739E-1"),
};
#define NP3r2_4D 9
static const __float128 P3r2_4D_[NP3r2_4D + 1] = {
 s2dd(" 7.032152009675729604487575753279187576521E-7"),
 s2dd(" 1.015090352324577615777511269928856742848E-4"),
 s2dd(" 5.394262184808448484302067955186308730620E-3"),
 s2dd(" 1.375291438480256110455809354836988584325E-1"),
 s2dd(" 1.836247144461106304788160919310404376670E0"),
 s2dd(" 1.314378564254376655001094503090935880349E1"),
 s2dd(" 4.957184590465712006934452500894672343488E1"),
 s2dd(" 9.287394244300647738855415178790263465398E1"),
 s2dd(" 7.652563275535900609085229286020552768399E1"),
 s2dd(" 2.147042473003074533150718117770093209096E1"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   Peak relative error 1.0e-35
   0.3125 <= 1/x <= 0.375  */
#define NP2r7_3r2N 9
static const __float128 P2r7_3r2N_[NP2r7_3r2N + 1] = {
 s2dd(" 4.599033469240421554219816935160627085991E-7"),
 s2dd(" 4.665724440345003914596647144630893997284E-5"),
 s2dd(" 1.684348845667764271596142716944374892756E-3"),
 s2dd(" 2.802446446884455707845985913454440176223E-2"),
 s2dd(" 2.321937586453963310008279956042545173930E-1"),
 s2dd(" 9.640277413988055668692438709376437553804E-1"),
 s2dd(" 1.911021064710270904508663334033003246028E0"),
 s2dd(" 1.600811610164341450262992138893970224971E0"),
 s2dd(" 4.266299218652587901171386591543457861138E-1"),
 s2dd(" 1.316470424456061252962568223251247207325E-2"),
};
#define NP2r7_3r2D 8
static const __float128 P2r7_3r2D_[NP2r7_3r2D + 1] = {
 s2dd(" 3.924508608545520758883457108453520099610E-6"),
 s2dd(" 4.029707889408829273226495756222078039823E-4"),
 s2dd(" 1.484629715787703260797886463307469600219E-2"),
 s2dd(" 2.553136379967180865331706538897231588685E-1"),
 s2dd(" 2.229457223891676394409880026887106228740E0"),
 s2dd(" 1.005708903856384091956550845198392117318E1"),
 s2dd(" 2.277082659664386953166629360352385889558E1"),
 s2dd(" 2.384726835193630788249826630376533988245E1"),
 s2dd(" 9.700989749041320895890113781610939632410E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   Peak relative error 1.7e-36
   0.3125 <= 1/x <= 0.4375  */
#define NP2r3_2r7N 9
static const __float128 P2r3_2r7N_[NP2r3_2r7N + 1] = {
 s2dd(" 3.916766777108274628543759603786857387402E-6"),
 s2dd(" 3.212176636756546217390661984304645137013E-4"),
 s2dd(" 9.255768488524816445220126081207248947118E-3"),
 s2dd(" 1.214853146369078277453080641911700735354E-1"),
 s2dd(" 7.855163309847214136198449861311404633665E-1"),
 s2dd(" 2.520058073282978403655488662066019816540E0"),
 s2dd(" 3.825136484837545257209234285382183711466E0"),
 s2dd(" 2.432569427554248006229715163865569506873E0"),
 s2dd(" 4.877934835018231178495030117729800489743E-1"),
 s2dd(" 1.109902737860249670981355149101343427885E-2"),
};
#define NP2r3_2r7D 8
static const __float128 P2r3_2r7D_[NP2r3_2r7D + 1] = {
 s2dd(" 3.342307880794065640312646341190547184461E-5"),
 s2dd(" 2.782182891138893201544978009012096558265E-3"),
 s2dd(" 8.221304931614200702142049236141249929207E-2"),
 s2dd(" 1.123728246291165812392918571987858010949E0"),
 s2dd(" 7.740482453652715577233858317133423434590E0"),
 s2dd(" 2.737624677567945952953322566311201919139E1"),
 s2dd(" 4.837181477096062403118304137851260715475E1"),
 s2dd(" 3.941098643468580791437772701093795299274E1"),
 s2dd(" 1.245821247166544627558323920382547533630E1"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),
   Peak relative error 1.7e-35
   0.4375 <= 1/x <= 0.5  */
#define NP2_2r3N 8
static const __float128 P2_2r3N_[NP2_2r3N + 1] = {
 s2dd(" 3.397930802851248553545191160608731940751E-4"),
 s2dd(" 2.104020902735482418784312825637833698217E-2"),
 s2dd(" 4.442291771608095963935342749477836181939E-1"),
 s2dd(" 4.131797328716583282869183304291833754967E0"),
 s2dd(" 1.819920169779026500146134832455189917589E1"),
 s2dd(" 3.781779616522937565300309684282401791291E1"),
 s2dd(" 3.459605449728864218972931220783543410347E1"),
 s2dd(" 1.173594248397603882049066603238568316561E1"),
 s2dd(" 9.455702270242780642835086549285560316461E-1"),
};
#define NP2_2r3D 8
static const __float128 P2_2r3D_[NP2_2r3D + 1] = {
 s2dd(" 2.899568897241432883079888249845707400614E-3"),
 s2dd(" 1.831107138190848460767699919531132426356E-1"),
 s2dd(" 3.999350044057883839080258832758908825165E0"),
 s2dd(" 3.929041535867957938340569419874195303712E1"),
 s2dd(" 1.884245613422523323068802689915538908291E2"),
 s2dd(" 4.461469948819229734353852978424629815929E2"),
 s2dd(" 5.004998753999796821224085972610636347903E2"),
 s2dd(" 2.386342520092608513170837883757163414100E2"),
 s2dd(" 3.791322528149347975999851588922424189957E1"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 8.0e-36
   0 <= 1/x <= .0625  */
#define NQ16_IN 10
static const __float128 Q16_IN_[NQ16_IN + 1] = {
 s2dd(" -3.917420835712508001321875734030357393421E-18"),
 s2dd(" -4.440311387483014485304387406538069930457E-15"),
 s2dd(" -1.951635424076926487780929645954007139616E-12"),
 s2dd(" -4.318256438421012555040546775651612810513E-10"),
 s2dd(" -5.231244131926180765270446557146989238020E-8"),
 s2dd(" -3.540072702902043752460711989234732357653E-6"),
 s2dd(" -1.311017536555269966928228052917534882984E-4"),
 s2dd(" -2.495184669674631806622008769674827575088E-3"),
 s2dd(" -2.141868222987209028118086708697998506716E-2"),
 s2dd(" -6.184031415202148901863605871197272650090E-2"),
 s2dd(" -1.922298704033332356899546792898156493887E-2"),
};
#define NQ16_ID 9
static const __float128 Q16_ID_[NQ16_ID + 1] = {
 s2dd(" 3.820418034066293517479619763498400162314E-17"),
 s2dd(" 4.340702810799239909648911373329149354911E-14"),
 s2dd(" 1.914985356383416140706179933075303538524E-11"),
 s2dd(" 4.262333682610888819476498617261895474330E-9"),
 s2dd(" 5.213481314722233980346462747902942182792E-7"),
 s2dd(" 3.585741697694069399299005316809954590558E-5"),
 s2dd(" 1.366513429642842006385029778105539457546E-3"),
 s2dd(" 2.745282599850704662726337474371355160594E-2"),
 s2dd(" 2.637644521611867647651200098449903330074E-1"),
 s2dd(" 1.006953426110765984590782655598680488746E0"),
 /* 1.000000000000000000000000000000000000000E0 */
 };

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 1.9e-36
   0.0625 <= 1/x <= 0.125  */
#define NQ8_16N 11
static const __float128 Q8_16N_[NQ8_16N + 1] = {
 s2dd(" -2.028630366670228670781362543615221542291E-17"),
 s2dd(" -1.519634620380959966438130374006858864624E-14"),
 s2dd(" -4.540596528116104986388796594639405114524E-12"),
 s2dd(" -7.085151756671466559280490913558388648274E-10"),
 s2dd(" -6.351062671323970823761883833531546885452E-8"),
 s2dd(" -3.390817171111032905297982523519503522491E-6"),
 s2dd(" -1.082340897018886970282138836861233213972E-4"),
 s2dd(" -2.020120801187226444822977006648252379508E-3"),
 s2dd(" -2.093169910981725694937457070649605557555E-2"),
 s2dd(" -1.092176538874275712359269481414448063393E-1"),
 s2dd(" -2.374790947854765809203590474789108718733E-1"),
 s2dd(" -1.365364204556573800719985118029601401323E-1"),
};
#define NQ8_16D 11
static const __float128 Q8_16D_[NQ8_16D + 1] = {
 s2dd(" 1.978397614733632533581207058069628242280E-16"),
 s2dd(" 1.487361156806202736877009608336766720560E-13"),
 s2dd(" 4.468041406888412086042576067133365913456E-11"),
 s2dd(" 7.027822074821007443672290507210594648877E-9"),
 s2dd(" 6.375740580686101224127290062867976007374E-7"),
 s2dd(" 3.466887658320002225888644977076410421940E-5"),
 s2dd(" 1.138625640905289601186353909213719596986E-3"),
 s2dd(" 2.224470799470414663443449818235008486439E-2"),
 s2dd(" 2.487052928527244907490589787691478482358E-1"),
 s2dd(" 1.483927406564349124649083853892380899217E0"),
 s2dd(" 4.182773513276056975777258788903489507705E0"),
 s2dd(" 4.419665392573449746043880892524360870944E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 1.5e-35
   0.125 <= 1/x <= 0.1875  */
#define NQ5_8N 10
static const __float128 Q5_8N_[NQ5_8N + 1] = {
 s2dd(" -3.656082407740970534915918390488336879763E-13"),
 s2dd(" -1.344660308497244804752334556734121771023E-10"),
 s2dd(" -1.909765035234071738548629788698150760791E-8"),
 s2dd(" -1.366668038160120210269389551283666716453E-6"),
 s2dd(" -5.392327355984269366895210704976314135683E-5"),
 s2dd(" -1.206268245713024564674432357634540343884E-3"),
 s2dd(" -1.515456784370354374066417703736088291287E-2"),
 s2dd(" -1.022454301137286306933217746545237098518E-1"),
 s2dd(" -3.373438906472495080504907858424251082240E-1"),
 s2dd(" -4.510782522110845697262323973549178453405E-1"),
 s2dd(" -1.549000892545288676809660828213589804884E-1"),
};
#define NQ5_8D 10
static const __float128 Q5_8D_[NQ5_8D + 1] = {
 s2dd(" 3.565550843359501079050699598913828460036E-12"),
 s2dd(" 1.321016015556560621591847454285330528045E-9"),
 s2dd(" 1.897542728662346479999969679234270605975E-7"),
 s2dd(" 1.381720283068706710298734234287456219474E-5"),
 s2dd(" 5.599248147286524662305325795203422873725E-4"),
 s2dd(" 1.305442352653121436697064782499122164843E-2"),
 s2dd(" 1.750234079626943298160445750078631894985E-1"),
 s2dd(" 1.311420542073436520965439883806946678491E0"),
 s2dd(" 5.162757689856842406744504211089724926650E0"),
 s2dd(" 9.527760296384704425618556332087850581308E0"),
 s2dd(" 6.604648207463236667912921642545100248584E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 1.3e-35
   0.1875 <= 1/x <= 0.25  */
#define NQ4_5N 10
static const __float128 Q4_5N_[NQ4_5N + 1] = {
 s2dd(" -4.079513568708891749424783046520200903755E-11"),
 s2dd(" -9.326548104106791766891812583019664893311E-9"),
 s2dd(" -8.016795121318423066292906123815687003356E-7"),
 s2dd(" -3.372350544043594415609295225664186750995E-5"),
 s2dd(" -7.566238665947967882207277686375417983917E-4"),
 s2dd(" -9.248861580055565402130441618521591282617E-3"),
 s2dd(" -6.033106131055851432267702948850231270338E-2"),
 s2dd(" -1.966908754799996793730369265431584303447E-1"),
 s2dd(" -2.791062741179964150755788226623462207560E-1"),
 s2dd(" -1.255478605849190549914610121863534191666E-1"),
 s2dd(" -4.320429862021265463213168186061696944062E-3"),
};
#define NQ4_5D 9
static const __float128 Q4_5D_[NQ4_5D + 1] = {
 s2dd(" 3.978497042580921479003851216297330701056E-10"),
 s2dd(" 9.203304163828145809278568906420772246666E-8"),
 s2dd(" 8.059685467088175644915010485174545743798E-6"),
 s2dd(" 3.490187375993956409171098277561669167446E-4"),
 s2dd(" 8.189109654456872150100501732073810028829E-3"),
 s2dd(" 1.072572867311023640958725265762483033769E-1"),
 s2dd(" 7.790606862409960053675717185714576937994E-1"),
 s2dd(" 3.016049768232011196434185423512777656328E0"),
 s2dd(" 5.722963851442769787733717162314477949360E0"),
 s2dd(" 4.510527838428473279647251350931380867663E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 2.1e-35
   0.25 <= 1/x <= 0.3125  */
#define NQ3r2_4N 9
static const __float128 Q3r2_4N_[NQ3r2_4N + 1] = {
 s2dd(" -1.087480809271383885936921889040388133627E-8"),
 s2dd(" -1.690067828697463740906962973479310170932E-6"),
 s2dd(" -9.608064416995105532790745641974762550982E-5"),
 s2dd(" -2.594198839156517191858208513873961837410E-3"),
 s2dd(" -3.610954144421543968160459863048062977822E-2"),
 s2dd(" -2.629866798251843212210482269563961685666E-1"),
 s2dd(" -9.709186825881775885917984975685752956660E-1"),
 s2dd(" -1.667521829918185121727268867619982417317E0"),
 s2dd(" -1.109255082925540057138766105229900943501E0"),
 s2dd(" -1.812932453006641348145049323713469043328E-1"),
};
#define NQ3r2_4D 9
static const __float128 Q3r2_4D_[NQ3r2_4D + 1] = {
 s2dd(" 1.060552717496912381388763753841473407026E-7"),
 s2dd(" 1.676928002024920520786883649102388708024E-5"),
 s2dd(" 9.803481712245420839301400601140812255737E-4"),
 s2dd(" 2.765559874262309494758505158089249012930E-2"),
 s2dd(" 4.117921827792571791298862613287549140706E-1"),
 s2dd(" 3.323769515244751267093378361930279161413E0"),
 s2dd(" 1.436602494405814164724810151689705353670E1"),
 s2dd(" 3.163087869617098638064881410646782408297E1"),
 s2dd(" 3.198181264977021649489103980298349589419E1"),
 s2dd(" 1.203649258862068431199471076202897823272E1"),
 /* 1.000000000000000000000000000000000000000E0  */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 1.6e-36
   0.3125 <= 1/x <= 0.375  */
#define NQ2r7_3r2N 9
static const __float128 Q2r7_3r2N_[NQ2r7_3r2N + 1] = {
 s2dd(" -1.723405393982209853244278760171643219530E-7"),
 s2dd(" -2.090508758514655456365709712333460087442E-5"),
 s2dd(" -9.140104013370974823232873472192719263019E-4"),
 s2dd(" -1.871349499990714843332742160292474780128E-2"),
 s2dd(" -1.948930738119938669637865956162512983416E-1"),
 s2dd(" -1.048764684978978127908439526343174139788E0"),
 s2dd(" -2.827714929925679500237476105843643064698E0"),
 s2dd(" -3.508761569156476114276988181329773987314E0"),
 s2dd(" -1.669332202790211090973255098624488308989E0"),
 s2dd(" -1.930796319299022954013840684651016077770E-1"),
};
#define NQ2r7_3r2D 9
static const __float128 Q2r7_3r2D_[NQ2r7_3r2D + 1] = {
 s2dd(" 1.680730662300831976234547482334347983474E-6"),
 s2dd(" 2.084241442440551016475972218719621841120E-4"),
 s2dd(" 9.445316642108367479043541702688736295579E-3"),
 s2dd(" 2.044637889456631896650179477133252184672E-1"),
 s2dd(" 2.316091982244297350829522534435350078205E0"),
 s2dd(" 1.412031891783015085196708811890448488865E1"),
 s2dd(" 4.583830154673223384837091077279595496149E1"),
 s2dd(" 7.549520609270909439885998474045974122261E1"),
 s2dd(" 5.697605832808113367197494052388203310638E1"),
 s2dd(" 1.601496240876192444526383314589371686234E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 9.5e-36
   0.375 <= 1/x <= 0.4375  */
#define NQ2r3_2r7N 9
static const __float128 Q2r3_2r7N_[NQ2r3_2r7N + 1] = {
 s2dd(" -8.603042076329122085722385914954878953775E-7"),
 s2dd(" -7.701746260451647874214968882605186675720E-5"),
 s2dd(" -2.407932004380727587382493696877569654271E-3"),
 s2dd(" -3.403434217607634279028110636919987224188E-2"),
 s2dd(" -2.348707332185238159192422084985713102877E-1"),
 s2dd(" -7.957498841538254916147095255700637463207E-1"),
 s2dd(" -1.258469078442635106431098063707934348577E0"),
 s2dd(" -8.162415474676345812459353639449971369890E-1"),
 s2dd(" -1.581783890269379690141513949609572806898E-1"),
 s2dd(" -1.890595651683552228232308756569450822905E-3"),
};
#define NQ2r3_2r7D 8
static const __float128 Q2r3_2r7D_[NQ2r3_2r7D + 1] = {
 s2dd(" 8.390017524798316921170710533381568175665E-6"),
 s2dd(" 7.738148683730826286477254659973968763659E-4"),
 s2dd(" 2.541480810958665794368759558791634341779E-2"),
 s2dd(" 3.878879789711276799058486068562386244873E-1"),
 s2dd(" 3.003783779325811292142957336802456109333E0"),
 s2dd(" 1.206480374773322029883039064575464497400E1"),
 s2dd(" 2.458414064785315978408974662900438351782E1"),
 s2dd(" 2.367237826273668567199042088835448715228E1"),
 s2dd(" 9.231451197519171090875569102116321676763E0"),
 /* 1.000000000000000000000000000000000000000E0 */
};

/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),
   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),
   Peak relative error 1.4e-36
   0.4375 <= 1/x <= 0.5  */
#define NQ2_2r3N 9
static const __float128 Q2_2r3N_[NQ2_2r3N + 1] = {
 s2dd(" -5.552507516089087822166822364590806076174E-6"),
 s2dd(" -4.135067659799500521040944087433752970297E-4"),
 s2dd(" -1.059928728869218962607068840646564457980E-2"),
 s2dd(" -1.212070036005832342565792241385459023801E-1"),
 s2dd(" -6.688350110633603958684302153362735625156E-1"),
 s2dd(" -1.793587878197360221340277951304429821582E0"),
 s2dd(" -2.225407682237197485644647380483725045326E0"),
 s2dd(" -1.123402135458940189438898496348239744403E0"),
 s2dd(" -1.679187241566347077204805190763597299805E-1"),
 s2dd(" -1.458550613639093752909985189067233504148E-3"),
};
#define NQ2_2r3D 8
static const __float128 Q2_2r3D_[NQ2_2r3D + 1] = {
 s2dd(" 5.415024336507980465169023996403597916115E-5"),
 s2dd(" 4.179246497380453022046357404266022870788E-3"),
 s2dd(" 1.136306384261959483095442402929502368598E-1"),
 s2dd(" 1.422640343719842213484515445393284072830E0"),
 s2dd(" 8.968786703393158374728850922289204805764E0"),
 s2dd(" 2.914542473339246127533384118781216495934E1"),
 s2dd(" 4.781605421020380669870197378210457054685E1"),
 s2dd(" 3.693865837171883152382820584714795072937E1"),
 s2dd(" 1.153220502744204904763115556224395893076E1"),
  /* 1.000000000000000000000000000000000000000E0 */
};


/* Bessel function of the first kind, order one.  */

template<> dd_real BesselJ1(dd_real x) {
  __float128 xx, xinv, z, p, q, c, s, cc, ss;

 // if (! finiteq (x))
 //   {
 //     if (x != x)
    //return x + x;
 //     else
    //return 0;
 //   }
  if (x == 0)
    return x;
  xx = fabs(x);
  if (xx <= 1e-58 /*0x1p-58Q*/)
    {
      __float128 ret = x * 0.5;
//      math_check_force_underflow (ret);
      if (ret == 0)
    //errno = ERANGE;
      return ret;
    }
  if (xx <= 2)
    {
      /* 0 <= x <= 2 */
      z = xx * xx;
      p = xx * z * neval (z, J0_2N_, NJ0_2N) / deval (z, J0_2D_, NJ0_2D);
      p += 0.5 * xx;
      if (x < 0)
    p = -p;
      return p;
    }

  /* X = x - 3 pi/4
     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)
     = 1/sqrt(2) * (-cos(x) + sin(x))
     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)
     = -1/sqrt(2) * (sin(x) + cos(x))
     cf. Fdlibm.  */
  sincos(xx, s, c);
  ss = -s - c;
  cc = s - c;
  if (xx <= 1e256 /*FLT128_MAX*/ / 2)
    {
      z = cos(xx + xx);
      if ((s * c) > 0)
    cc = z / ss;
      else
    ss = z / cc;
    }

  if (xx > 1e256 /*0x1p256Q*/)
    {
      z = ONEOSQPI * cc / sqrt (xx);
      if (x < 0)
    z = -z;
      return z;
    }

  xinv = 1 / xx;
  z = xinv * xinv;
  if (xinv <= 0.25)
    {
      if (xinv <= 0.125)
    {
      if (xinv <= 0.0625)
        {
          p = neval (z, P16_IN_, NP16_IN) / deval (z, P16_ID_, NP16_ID);
          q = neval (z, Q16_IN_, NQ16_IN) / deval (z, Q16_ID_, NQ16_ID);
        }
      else
        {
          p = neval (z, P8_16N_, NP8_16N) / deval (z, P8_16D_, NP8_16D);
          q = neval (z, Q8_16N_, NQ8_16N) / deval (z, Q8_16D_, NQ8_16D);
        }
    }
      else if (xinv <= 0.1875)
    {
      p = neval (z, P5_8N_, NP5_8N) / deval (z, P5_8D_, NP5_8D);
      q = neval (z, Q5_8N_, NQ5_8N) / deval (z, Q5_8D_, NQ5_8D);
    }
      else
    {
      p = neval (z, P4_5N_, NP4_5N) / deval (z, P4_5D_, NP4_5D);
      q = neval (z, Q4_5N_, NQ4_5N) / deval (z, Q4_5D_, NQ4_5D);
    }
    }                /* .25 */
  else /* if (xinv <= 0.5) */
    {
      if (xinv <= 0.375)
    {
      if (xinv <= 0.3125)
        {
          p = neval (z, P3r2_4N_, NP3r2_4N) / deval (z, P3r2_4D_, NP3r2_4D);
          q = neval (z, Q3r2_4N_, NQ3r2_4N) / deval (z, Q3r2_4D_, NQ3r2_4D);
        }
      else
        {
          p = neval (z, P2r7_3r2N_, NP2r7_3r2N) / deval (z, P2r7_3r2D_, NP2r7_3r2D);
          q = neval (z, Q2r7_3r2N_, NQ2r7_3r2N) / deval (z, Q2r7_3r2D_, NQ2r7_3r2D);
        }
    }
      else if (xinv <= 0.4375)
    {
      p = neval (z, P2r3_2r7N_, NP2r3_2r7N) / deval (z, P2r3_2r7D_, NP2r3_2r7D);
      q = neval (z, Q2r3_2r7N_, NQ2r3_2r7N) / deval (z, Q2r3_2r7D_, NQ2r3_2r7D);
    }
      else
    {
      p = neval (z, P2_2r3N_, NP2_2r3N) / deval (z, P2_2r3D_, NP2_2r3D);
      q = neval (z, Q2_2r3N_, NQ2_2r3N) / deval (z, Q2_2r3D_, NQ2_2r3D);
    }
    }
  p = 1 + z * p;
  q = z * q;
  q = q * xinv + 0.375 * xinv;
  z = ONEOSQPI * (p * cc - q * ss) / sqrt (xx);
  if (x < 0)
    z = -z;
  return z;
}



/* Y1(x) = 2/pi * (log(x) * J1(x) - 1/x) + x R(x^2)
   Peak relative error 6.2e-38
   0 <= x <= 2   */
#define NY0_2N 7
static const __float128 Y0_2N_[NY0_2N + 1] = {
 s2dd(" -6.804415404830253804408698161694720833249E19"),
 s2dd(" 1.805450517967019908027153056150465849237E19"),
 s2dd(" -8.065747497063694098810419456383006737312E17"),
 s2dd(" 1.401336667383028259295830955439028236299E16"),
 s2dd(" -1.171654432898137585000399489686629680230E14"),
 s2dd(" 5.061267920943853732895341125243428129150E11"),
 s2dd(" -1.096677850566094204586208610960870217970E9"),
 s2dd(" 9.541172044989995856117187515882879304461E5"),
};
#define NY0_2D 7
static const __float128 Y0_2D_[NY0_2D + 1] = {
 s2dd(" 3.470629591820267059538637461549677594549E20"),
 s2dd(" 4.120796439009916326855848107545425217219E18"),
 s2dd(" 2.477653371652018249749350657387030814542E16"),
 s2dd(" 9.954678543353888958177169349272167762797E13"),
 s2dd(" 2.957927997613630118216218290262851197754E11"),
 s2dd(" 6.748421382188864486018861197614025972118E8"),
 s2dd(" 1.173453425218010888004562071020305709319E6"),
 s2dd(" 1.450335662961034949894009554536003377187E3"),
  /* 1.000000000000000000000000000000000000000E0 */
};


/* Bessel function of the second kind, order one.  */

template<> dd_real BesselN1(dd_real x) {
  __float128 xx, xinv, z, p, q, c, s, cc, ss;

  //if (! finiteq (x))
  //  return 1 / (x + x * x);
  if (x <= 0)
    {
      if (x < 0)
    return (zero / (zero * x));
      return -1 / zero; /* -inf and divide by zero exception.  */
    }
  xx = fabs(x);
  if (xx <= 1e-114 /*0x1p-114*/)
    {
      z = -TWOOPI / x;
      //if (isinf(z)) errno = ERANGE;
      return z;
    }
  if (xx <= 2)
    {
      /* 0 <= x <= 2 */
      //SET_RESTORE_ROUNDF128 (FE_TONEAREST);
      z = xx * xx;
      p = xx * neval (z, Y0_2N_, NY0_2N) / deval (z, Y0_2D_, NY0_2D);
      p = -TWOOPI / xx + p;
      p = TWOOPI * log (x) * BesselJ1(x) + p;
      return p;
    }

  /* X = x - 3 pi/4
     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)
     = 1/sqrt(2) * (-cos(x) + sin(x))
     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)
     = -1/sqrt(2) * (sin(x) + cos(x))
     cf. Fdlibm.  */
  sincos (xx, s, c);
  ss = -s - c;
  cc = s - c;
  if (xx <= 1e256 /*FLT128_MAX*/ / 2)
    {
      z = cos(xx + xx);
      if ((s * c) > 0)
    cc = z / ss;
      else
    ss = z / cc;
    }

  if (xx > 1e256 /*0x1p256Q*/)
    return ONEOSQPI * ss / sqrt (xx);

  xinv = 1 / xx;
  z = xinv * xinv;
  if (xinv <= 0.25)
    {
      if (xinv <= 0.125)
    {
      if (xinv <= 0.0625)
        {
          p = neval (z, P16_IN_, NP16_IN) / deval (z, P16_ID_, NP16_ID);
          q = neval (z, Q16_IN_, NQ16_IN) / deval (z, Q16_ID_, NQ16_ID);
        }
      else
        {
          p = neval (z, P8_16N_, NP8_16N) / deval (z, P8_16D_, NP8_16D);
          q = neval (z, Q8_16N_, NQ8_16N) / deval (z, Q8_16D_, NQ8_16D);
        }
    }
      else if (xinv <= 0.1875)
    {
      p = neval (z, P5_8N_, NP5_8N) / deval (z, P5_8D_, NP5_8D);
      q = neval (z, Q5_8N_, NQ5_8N) / deval (z, Q5_8D_, NQ5_8D);
    }
      else
    {
      p = neval (z, P4_5N_, NP4_5N) / deval (z, P4_5D_, NP4_5D);
      q = neval (z, Q4_5N_, NQ4_5N) / deval (z, Q4_5D_, NQ4_5D);
    }
    }                /* .25 */
  else /* if (xinv <= 0.5) */
    {
      if (xinv <= 0.375)
    {
      if (xinv <= 0.3125)
        {
          p = neval (z, P3r2_4N_, NP3r2_4N) / deval (z, P3r2_4D_, NP3r2_4D);
          q = neval (z, Q3r2_4N_, NQ3r2_4N) / deval (z, Q3r2_4D_, NQ3r2_4D);
        }
      else
        {
          p = neval (z, P2r7_3r2N_, NP2r7_3r2N) / deval (z, P2r7_3r2D_, NP2r7_3r2D);
          q = neval (z, Q2r7_3r2N_, NQ2r7_3r2N) / deval (z, Q2r7_3r2D_, NQ2r7_3r2D);
        }
    }
      else if (xinv <= 0.4375)
    {
      p = neval (z, P2r3_2r7N_, NP2r3_2r7N) / deval (z, P2r3_2r7D_, NP2r3_2r7D);
      q = neval (z, Q2r3_2r7N_, NQ2r3_2r7N) / deval (z, Q2r3_2r7D_, NQ2r3_2r7D);
    }
      else
    {
      p = neval (z, P2_2r3N_, NP2_2r3N) / deval (z, P2_2r3D_, NP2_2r3D);
      q = neval (z, Q2_2r3N_, NQ2_2r3N) / deval (z, Q2_2r3D_, NQ2_2r3D);
    }
    }
  p = 1 + z * p;
  q = z * q;
  q = q * xinv + 0.375 * xinv;
  z = ONEOSQPI * (p * ss + q * cc) / sqrt (xx);
  return z;
}
#endif

void ForceLinkerNotToWarnAboutNoPublicSymbols_es_specfunc_dd() {
    crash("ForceLinkerNotToWarnAboutNoPublicSymbols_es_specfunc_dd");
}
